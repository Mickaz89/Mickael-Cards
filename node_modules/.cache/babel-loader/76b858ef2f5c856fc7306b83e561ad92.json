{"ast":null,"code":"var _jsxFileName = \"/Users/mickaelzana/Desktop/cards-client/src/components/EditableTableUI.js\";\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditableTableUI = () => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const EditableContext = /*#__PURE__*/React.createContext(null);\n\n  const EditableRow = ({\n    index,\n    ...props\n  }) => {\n    _s();\n\n    const [form] = Form.useForm();\n    return /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      component: false,\n      children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n        value: form,\n        children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this);\n  };\n\n  _s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n    return [Form.useForm];\n  });\n\n  const EditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    ...restProps\n  }) => {\n    _s2();\n\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n      if (editing) {\n        inputRef.current.focus();\n      }\n    }, [editing]);\n\n    const toggleEdit = () => {\n      setEditing(!editing);\n      console.log('FORM FORM RECORD ', record);\n      console.log('FORM FORM DATA INDEX ', [dataIndex]);\n      console.log('FORM FORM ', record[dataIndex]);\n      form.setFieldsValue({\n        [dataIndex]: record[dataIndex]\n      });\n    };\n\n    const save = async () => {\n      try {\n        const values = await form.validateFields();\n        toggleEdit();\n        handleSave({ ...record,\n          ...values\n        });\n      } catch (errInfo) {\n        console.log('Save failed:', errInfo);\n      }\n    };\n\n    let childNode = children;\n\n    if (editable) {\n      childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n        style: {\n          margin: 0\n        },\n        name: dataIndex,\n        rules: [{\n          required: true,\n          message: `${title} is required.`\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          ref: inputRef,\n          onPressEnter: save,\n          onBlur: save\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editable-cell-value-wrap\",\n        style: {\n          paddingRight: 24\n        },\n        onClick: toggleEdit,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n      children: childNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 10\n    }, this);\n  };\n\n  _s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n  class EditableTable extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.handleDelete = key => {\n        const dataSource = [...this.state.dataSource];\n        this.setState({\n          dataSource: dataSource.filter(item => item.key !== key)\n        });\n      };\n\n      this.handleAdd = () => {\n        const {\n          count,\n          dataSource\n        } = this.state;\n        const newData = {\n          key: count,\n          name: `Edward King ${count}`,\n          age: '32',\n          address: `London, Park Lane no. ${count}`\n        };\n        this.setState({\n          dataSource: [...dataSource, newData],\n          count: count + 1\n        });\n      };\n\n      this.handleSave = row => {\n        const newData = [...this.state.dataSource];\n        const index = newData.findIndex(item => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        this.setState({\n          dataSource: newData\n        });\n      };\n\n      this.columns = [{\n        title: 'name',\n        dataIndex: 'name',\n        width: '30%',\n        editable: true\n      }, {\n        title: 'age',\n        dataIndex: 'age'\n      }, {\n        title: 'address',\n        dataIndex: 'address'\n      }, {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (_, record) => this.state.dataSource.length >= 1 ? /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to delete?\",\n          onConfirm: () => this.handleDelete(record.key),\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this) : null\n      }];\n      this.state = {\n        dataSource: [{\n          key: '0',\n          name: 'Edward King 0',\n          age: '32',\n          address: 'London, Park Lane no. 0'\n        }, {\n          key: '1',\n          name: 'Edward King 1',\n          age: '32',\n          address: 'London, Park Lane no. 1'\n        }],\n        count: 2\n      };\n    }\n\n    render() {\n      const {\n        dataSource\n      } = this.state;\n      const components = {\n        body: {\n          row: EditableRow,\n          cell: EditableCell\n        }\n      };\n      const columns = this.columns.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return { ...col,\n          onCell: record => ({\n            record,\n            editable: col.editable,\n            dataIndex: col.dataIndex,\n            title: col.title,\n            handleSave: this.handleSave\n          })\n        };\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.handleAdd,\n          type: \"primary\",\n          style: {\n            marginBottom: 16\n          },\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          components: components,\n          rowClassName: () => 'editable-row',\n          bordered: true,\n          dataSource: dataSource,\n          columns: columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this);\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(EditableTable, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 8\n  }, this);\n};\n\n_c = EditableTableUI;\nexport default EditableTableUI;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableTableUI\");","map":{"version":3,"sources":["/Users/mickaelzana/Desktop/cards-client/src/components/EditableTableUI.js"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Button","Popconfirm","Form","EditableTableUI","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","console","log","setFieldsValue","save","values","validateFields","errInfo","childNode","margin","required","message","paddingRight","EditableTable","Component","constructor","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","name","age","address","row","findIndex","splice","columns","width","render","_","length","components","body","cell","map","col","onCell","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\n\nconst EditableTableUI = () => {\n    \nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    console.log('FORM FORM RECORD ', record)\n    console.log('FORM FORM DATA INDEX ', [dataIndex])\n    console.log('FORM FORM ', record[dataIndex])\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '30%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (_, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n    this.state = {\n      dataSource: [\n        {\n          key: '0',\n          name: 'Edward King 0',\n          age: '32',\n          address: 'London, Park Lane no. 0',\n        },\n        {\n          key: '1',\n          name: 'Edward King 1',\n          age: '32',\n          address: 'London, Park Lane no. 1',\n        },\n      ],\n      count: 2,\n    };\n  }\n\n  handleDelete = (key) => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({\n      dataSource: dataSource.filter((item) => item.key !== key),\n    });\n  };\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: '32',\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n  handleSave = (row) => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    this.setState({\n      dataSource: newData,\n    });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: (record) => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Button\n          onClick={this.handleAdd}\n          type=\"primary\"\n          style={{\n            marginBottom: 16,\n          }}\n        >\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nreturn(<EditableTable />);\n}\n\nexport default EditableTableUI"]},"metadata":{},"sourceType":"module"}