{"ast":null,"code":"var _jsxFileName = \"/Users/mickaelzana/Desktop/cards-client/src/components/TableUI.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form, Popover } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    console.log('FORM FORM RECORD ', record);\n    console.log('FORM FORM DATA INDEX ', [dataIndex][0][1]);\n    console.log('FORM FORM ', record.transaction_details.category);\n    form.setFieldsValue({\n      \"category\": record.transaction_details.category\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nconst TableUI = ({\n  data\n}) => {\n  const columns = [{\n    key: \"0\",\n    title: 'Vendor',\n    dataIndex: ['transaction_details', 'vendor'],\n    render: text => /*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => console.log('click'),\n      children: /*#__PURE__*/_jsxDEV(Popover, {\n        content: \"hello\",\n        title: \"Title\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 23\n    }, this)\n  }, {\n    key: \"1\",\n    title: 'Total',\n    dataIndex: ['transaction_details', 'total']\n  }, {\n    key: \"2\",\n    title: 'Category',\n    dataIndex: ['transaction_details', 'category'],\n    editable: true\n  }, {\n    key: \"3\",\n    title: 'Tag',\n    dataIndex: ['transaction_details', 'tag']\n  }];\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell\n    }\n  };\n\n  const handleSave = row => {\n    const newData = [...data];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item,\n      ...row\n    });\n    this.setState({\n      dataSource: newData\n    });\n  };\n\n  const finalColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave: handleSave\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: finalColumns,\n    components: components,\n    dataSource: data,\n    pagination: false,\n    scroll: {\n      y: 240\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = TableUI;\nexport default TableUI;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"TableUI\");","map":{"version":3,"sources":["/Users/mickaelzana/Desktop/cards-client/src/components/TableUI.js"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Button","Popconfirm","Form","Popover","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","console","log","transaction_details","category","setFieldsValue","save","values","validateFields","errInfo","childNode","margin","required","message","paddingRight","TableUI","data","columns","key","render","text","components","body","row","cell","newData","findIndex","item","splice","setState","dataSource","finalColumns","map","col","onCell","y"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form, Popover } from 'antd';\n\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    console.log('FORM FORM RECORD ', record)\n    console.log('FORM FORM DATA INDEX ', [dataIndex][0][1])\n    console.log('FORM FORM ', record.transaction_details.category)\n    form.setFieldsValue({\n      \"category\": record.transaction_details.category,\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nconst TableUI = ({data}) => {\n  const columns = [\n    {\n      key:\"0\",\n      title: 'Vendor',\n      dataIndex: ['transaction_details', 'vendor'],\n      render: text => <a onClick={() => console.log('click')}>\n        <Popover content={\"hello\"} title=\"Title\">\n          <Button type=\"primary\">{text}</Button>\n        </Popover>\n        </a>\n     \n    },\n    {\n      key:\"1\",\n      title: 'Total',\n      dataIndex: ['transaction_details', 'total'],\n      \n    },\n    {\n      key:\"2\",\n      title: 'Category',\n      dataIndex: ['transaction_details', 'category'],\n      editable:true\n    },\n    {\n        key:\"3\",\n        title: 'Tag',\n        dataIndex: ['transaction_details', 'tag'],\n       \n    },\n  ];\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  const handleSave = (row) => {\n    const newData = [...data];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    this.setState({\n      dataSource: newData,\n    });\n  };\n  \n  const finalColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave: handleSave,\n      }),\n    };\n  });\n  return (\n    <Table columns={finalColumns} components={components} dataSource={data} pagination={false} scroll={{ y: 240 }} />\n  )\n\n}\n\nexport default TableUI;"]},"metadata":{},"sourceType":"module"}