{"ast":null,"code":"var _jsxFileName = \"/Users/mickaelzana/Desktop/cards-client/src/components/TableUI.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nconst TableUI = ({\n  data\n}) => {\n  const columns = [{\n    title: 'Vendor',\n    dataIndex: ['transaction_details', 'vendor']\n  }, {\n    title: 'Total',\n    dataIndex: ['transaction_details', 'total']\n  }, {\n    title: 'Category',\n    dataIndex: ['transaction_details', 'category'],\n    editable: true\n  }, {\n    title: 'Tag',\n    dataIndex: ['transaction_details', 'tag'],\n    editable: true\n  }];\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell\n    }\n  };\n  const finalColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: finalColumns,\n    components: components,\n    dataSource: data,\n    pagination: false,\n    scroll: {\n      y: 240\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = TableUI;\nexport default TableUI;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"TableUI\");","map":{"version":3,"sources":["/Users/mickaelzana/Desktop/cards-client/src/components/TableUI.js"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Button","Popconfirm","Form","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","TableUI","data","columns","components","body","row","cell","finalColumns","map","col","onCell","y"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\n\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24,\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nconst TableUI = ({data}) => {\n  const columns = [\n    {\n      title: 'Vendor',\n      dataIndex: ['transaction_details', 'vendor'],\n     \n    },\n    {\n      title: 'Total',\n      dataIndex: ['transaction_details', 'total'],\n      \n    },\n    {\n      title: 'Category',\n      dataIndex: ['transaction_details', 'category'],\n      editable:true\n    },\n    {\n        title: 'Tag',\n        dataIndex: ['transaction_details', 'tag'],\n        editable: true\n    },\n  ];\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  \n  const finalColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n      }),\n    };\n  });\n  return (\n    <Table columns={finalColumns} components={components} dataSource={data} pagination={false} scroll={{ y: 240 }} />\n  )\n\n}\n\nexport default TableUI;"]},"metadata":{},"sourceType":"module"}